package cmd

import (
	"crypto/tls"
	_"fmt"
	"log"

	"github.com/eduxcode/certguard/certcheck"
	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

var checkCmd = &cobra.Command{
	Use:   "check [dom√≠nio]",
	Short: "Verifica o certificado SSL/TLS de um dom√≠nio.",
	Long:  `Verifica o certificado SSL/TLS de um dom√≠nio e exibe informa√ß√µes como validade, emitente e algoritmo de criptografia.`,
	Args:  cobra.ExactArgs(1), // Exige exatamente 1 argumento (dom√≠nio)
	Run: func(cmd *cobra.Command, args []string) {
		domain := args[0]

		// Verifica o certificado
		info, err := certcheck.CheckCertificate(domain)
		if err != nil {
			log.Fatalf("Erro ao verificar o certificado: %v", err)
		}

		// Exibe as informa√ß√µes com cores
		color.Cyan("üîí Dom√≠nio: %s\n", info.Domain)
		color.Blue("üìú Emitido por: %s\n", info.Issuer)
		color.Yellow("üìÖ Data de expira√ß√£o: %s\n", info.ExpiryDate.Format("2006-01-02"))
		color.Magenta("‚è≥ Dias restantes: %d\n", info.DaysRemaining)
		if info.IsValid {
			color.Green("‚úÖ Status: V√°lido\n")
		} else {
			color.Red("‚ùå Status: Expirado\n")
		}

		// Verifica o algoritmo de criptografia
		conn, err := tls.Dial("tcp", domain+":443", &tls.Config{
			InsecureSkipVerify: true,
		})
		if err != nil {
			log.Fatalf("Erro ao conectar ao dom√≠nio: %v", err)
		}
		defer conn.Close()

		cert := conn.ConnectionState().PeerCertificates[0]
		algorithmStatus := certcheck.CheckEncryptionAlgorithm(cert)
		color.Cyan("üîê Algoritmo de criptografia: %s\n", algorithmStatus)
	},
}

func init() {
	rootCmd.AddCommand(checkCmd)
}
